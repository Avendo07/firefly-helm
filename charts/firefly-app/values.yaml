# Default values for ..
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: "fireflyiii/core"
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "latest"

persistence:
  # -- If you set this to false, uploaded attachments are not stored persistently and will be lost with every restart of the pod
  enabled: true
  pvSize: 10Gi
  pvcSize: 10Gi
  accessModes: ReadWriteMany
  pvLocation: "CHANGE_THIS"


imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

podAnnotations: {}
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: NodePort
  port: 80

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}


config:
  # -- Set this to the name of a secret to load environment variables from. If defined, values in the secret will override values in config.env
  existingSecret: ""

  # -- Set environment variables from configMaps or Secrets
  envValueFrom: {}

  # -- Directly defined environment variables. Use this for non-secret configuration values.
  env:
    DB_HOST: "firefly-db"
    # DB_CONNECTION: pgsql
    # DB_PORT: "5432"
    DB_DATABASE: firefly
    DB_USERNAME: firefly
    DEFAULT_LANGUAGE: "en_US"
    DEFAULT_LOCALE: "equal"
    TZ: "Europe/Amsterdam"
    TRUSTED_PROXIES: "**"

# -- Create a new Secret from values file to store sensitive environment variables. Make sure to keep your secrets encrypted in the repository! For example, you can use the 'helm secrets' plugin (https://github.com/jkroepke/helm-secrets) to encrypt and manage secrets. If the 'config.existingSecret' value is set, a new Secret will not be created.
secrets:
  env:
    APP_PASSWORD: "CHANGE_ENCRYPT_ME"
    DB_PASSWORD: "CHANGE_ENCRYPT_ME"
  appSecret:
    "CHANGE_ME"

